?c
?sqrt
?exp
wd()
wdget
wdget()
getwd()
x<-c(2, -1, 3, 1.5, -.5)
data(mtcars)
str(mtcars)
View(mtcars)
weight<-mtcars$wt
cyliders<-mtcars$cyl
eight[cylinders==8]
weight[cylinders==8]
?mtcars
hist(mtcars$disp)
?rbinom
?rbernulli
snorm_means<-rep(NA, 10^4)
str(mtcars)
attach(mtcars)
mean(disp)
sd(disp)
sd(mpg)
mean(mpg)
pnorm(0)
dnorm(0)
?curve
max.loglik.mpg<-function(mean.mpg){
data(mtcars)
attach(mtcars)
sd.mpg<-6
#wektor gęstości
d.vec<-dnorm(mpg, mean.mpg, sd.mpg)
#log-wiarygodność
sum(log(d.vec))
}
curve(max.loglik.mpg)
curve(log )
max.loglik.mpg(21)
max.loglik.mpg(22)
max.loglik.mpg<-function(mean.mpg){
data(mtcars)
mpg<-mtcars$mpg
sd.mpg<-6
#wektor gęstości
d.vec<-dnorm(mpg, mean.mpg, sd.mpg)
#log-wiarygodność
sum(log(d.vec))
}
max.loglik.mpg(22)
curve(max.loglik.mpg)
curve(max.loglik.mpg,n =10)
curve(max.loglik.mpg,from=10, to=20)
for (i in 10:30) print(max.loglik.mpg(i))
curve(max.loglik.mpg)
seq(10,30, by=.1)
points.lik<-seq(10,30,by=.01)
lik.points<-rep(NA,lenght(points.lik))
for (i in 1:length(points.lik)) lik.points[i]<-max.loglik.mpg(points.lik[i])
points.lik<-seq(10,30,by=.01)
lik.points<-rep(NA,length(points.lik))
for (i in 1:length(points.lik)) lik.points[i]<-max.loglik.mpg(points.lik[i])
plot(points.lik, lik.points, t=l)
data("mtcars")
attach(mtcars)
#średnia z próby
mu<-mean(mpg)
#odchylenie standardowe
sigma<-sd(mpg)
#90%, 95% i 99% przedziały ufności
mu+c(-1,1)*simga/sqrt(32)*qnorm(.95)
?qqplot
qqnorm(mtcars$mpg)
qqnorm
?qqnorm
**Ważne**: interpretacja otrzymanych wyników jest następująca: jeżeli dane 32 samochodów w zbiorze `mtcars` są reprezentatywne dla pewnej populacji to średnie spalanie w tej populacji na 90% jest w przedziale (18.34,21.84), przy założeniu, że.
y <- rt(200, df = 5)
qqnorm(y); qqline(y, col = 2
##
qqplot(y, rt(300, df = 5))
qqplot(y, rt(300, df = 5))
qqplot(y, rt(300, df = 5))
qqplot(y, rt(300, df = 5))
qqplot(y, rt(300, df = 5))
qqplot(y, rt(300, df = 5))
qqplot(y, rt(300, df = 5))
qqplot(y, rt(300, df = 5))
qqplot(y, rt(300, df = 5))
qqplot(y, rt(300, df = 5))
qqplot(y, rt(300, df = 5))
qqplot(y, rt(300, df = 5))
qqplot(y, rt(300, df = 5))
qqplot(y, rt(300, df = 5))
qqplot(y, rt(300, df = 5))
qqplot(y, rt(300, df = 5))
qqplot(y, rt(300, df = 5))
qqplot(y, rt(300, df = 5))
qqplot(y, rt(300, df = 5))
qqplot(y, rt(300, df = 5))
qqplot(y, rt(300, df = 5))
qqplot(y, rt(300, df = 5))
qqplot(y, rt(300, df = 5))
qqplot(y, rt(300, df = 5))
qqplot(y, rt(300, df = 5))
qqplot(y, rt(300, df = 5))
qqplot(y, rt(300, df = 5))
qqplot(y, rt(300, df = 5))
qqplot(y, rt(300, df = 5))
qqplot(y, rt(300, df = 5))
qqplot(y, rt(300, df = 5))
qqplot(y, rt(300, df = 5))
y <- rt(200, df = 5)
qqnorm(y); qqline(y, col = 2
sample(3,2)
?mtcars
#spalanie samochodów ze skrzynią automatyczną
mpg.a<-mtcars$mpg[mtcars$am==0]
#spalanie samochodów ze skrzynią manualną
mpg.m<-mtcars$mpg[mtcars$am==1]
mpg.a
mpg.m
?t.test
t.test(mpg.a, mpg.m, paired=F)
am.test<-t.test(mpg.a, mpg.m, paired=F)
summary(am.test)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
55+55/20*c(-1,1)
table(disp)
table(cyl)
?anova
model.0<-lm(mpg~1, data=mtcars)
model.1<-lm(mpg~cyl, data=mtcars)
anova(model.0,model.1)
?chisq.test
chisq.test(table(mtcars$cyl, mtcars$am))
table(mtcars$cyl, mtcars$am)
chisq.test(mtcars$cyl)
mtcars$cyl
table(mtcars$cyl)
chisq.test(table(mtcars$cyl))
chisq.test(table(mtcars$am))
table(mtcars$am)
chisq.test(table(rbinom(100,1,.5)))
chisq.test(table(rbinom(100,1,.6)))
chisq.test(table(rbinom(100,1,.65)))
chisq.test(table(rbinom(100,1,.61)))
chisq.test(table(rbinom(100,1,.62)))
chisq.test(table(rbinom(100,1,.62)))
chisq.test(table(rbinom(100,1,.62)))
chisq.test(table(rbinom(100,1,.6)))
chisq.test(table(rbinom(100,1,.6)))
chisq.test(table(rbinom(100,1,.6)))
chisq.test(table(rbinom(100,1,.6)))
chisq.test(table(rbinom(100,1,.6)))
?lm
data(mtcars)
fit.mpg.disp<-lm(mpq~disp, data=mtcars)
str(mtcars$disp)
?mtcars
x<-mtcars$disp
y<-mtcars$mpg
#model regresji dla x i y
fit.lm<-lm(y~x)
coef(fit.lm)
plot.lm(fit.lm)
?plot.lm
plot.lm(fit.lm)
```
## Analysis of the life-cycle savings data
## given in Belsley, Kuh and Welsch.
lm.SR <- lm(sr ~ pop15 + pop75 + dpi + ddpi, data = LifeCycleSavings)
plot(lm.SR)
resid(fit.lm)
dim(mtcars)
plot(mtcars$mpg, mtcars$disp)
abline(a=c(15,200), b=c(20,400))
lines(c(20,30), c(300, 200))
mmtcars
mtcars
table(mtcars$cyl, mtcars$vs)
table(mtcars$cyl, mtcars$vs, mtcars$am)
apply(mtcars, 1, mean)
apply(mtcars, 2, mean)
apply(mtcars, 2, quantile, probs=(0,1))
apply(mtcars, 2, quantile, probs=c(0,1))
l.comp<- function(x,y){
if (length(x)==length(y)) TRUE else FALSE
}
l.comp(c(1,2), c(12,3,2))
l.comp(c(1,2), c(12,3))
#definiujemy funkcję czy długości wektorów są równe
l.comp<- function(x,y){
if (length(x)==length(y)) TRUE else FALSE
}
#definiujemy wektor liczbowy
v.1<- rep(1,3)
#i wektor logiczny
v.2<-c(F, T, T, T, T, F, T)
#tworzymy listę
my.list<- (num.v=v.1, log.v=v.2, fun=l.comp)
#definiujemy funkcję czy długości wektorów są równe
l.comp<- function(x,y){
if (length(x)==length(y)) TRUE else FALSE
}
#definiujemy wektor liczbowy
v.1<- rep(1,3)
#i wektor logiczny
v.2<-c(F, T, T, T, T, F, T)
#tworzymy listę
my.list<- list(num.v=v.1, log.v=v.2, fun=l.comp)
my.list
l.comp<- function(x,y){
if (length(x)==length(y)) TRUE else FALSE
}
l.comp(c(1,2), c(12,3))
l.comp(C(1,2,3), C(2,3))
